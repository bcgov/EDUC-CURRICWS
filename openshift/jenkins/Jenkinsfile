#!groovy
@Library('devops-library')
import bcgov.GitHubHelper

pipeline {
  agent any

  environment {
    DEBUG_OUTPUT = 'false'

    DEV_PROJECT = 'hswww8-dev'
    TEST_PROJECT = 'hswww8-test'
    PROD_PROJECT = 'hswww8-prod'
    TOOLS_PROJECT = 'hswww8-tools'

    REPO_NAME = 'educ-curricws'

    JOB_NAME = 'demo'

    SOURCE_REPO_RAW = 'https://github.com/bcgov/${REPO_NAME}/master'
    SOURCE_REPO_REF = 'master'
    SOURCE_REPO_URL = 'https://github.com/bcgov/${REPO_NAME}.git'

    APP_NAME = 'curric-webservice'
    APP_DOMAIN = 'pathfinder.gov.bc.ca'

    //TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS_PROJECT}.${APP_DOMAIN}"
    //DEV_HOST_ROUTE = "${APP_NAME}-${DEV_PROJECT}.${APP_DOMAIN}"
    //TEST_HOST_ROUTE = "${APP_NAME}-${TEST_PROJECT}.${APP_DOMAIN}"
    //PROD_HOST_ROUTE = "${APP_NAME}-${PROD_PROJECT}.${APP_DOMAIN}"
  }

  stages {
    stage('initialize') {
     agent any
      steps {
          // Cancel any running builds in progress
          timeout(10) {
              echo "Cancelling previous ${APP_NAME}-${JOB_NAME} builds in progress..."
              abortAllPreviousBuildInProgress(currentBuild)
          }

          script {
              if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                  // Force OpenShift Plugin directives to be verbose
                  openshift.logLevel(1)

                  // Print all environment variables
                  echo 'DEBUG - All pipeline environment variables:'
                  echo sh(returnStdout: true, script: 'env')
              }
          }
      }
    }
    stage('Build') {
      agent any
      steps {
        script {
          openshift.withCluster(){
            openshift.withProject(TOOLS_PROJECT){
              /*Backend: {
                try{
                    def bcBackend = openshift.process('-f', 'openshift/curricws-backend.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")

                    openshift.apply(bcBackend).narrow('bc').startBuild('-w').logs('-f')

                    openshift.tag("${REPO_NAME}-backend:latest", "${REPO_NAME}-backend:${JOB_NAME}")
                }
                catch(e) {
                    echo "Backend build failed"
                    throw e
                }
              }*/
              Frontend: {
                try{
                    //notifyStageStatus('Frontend', 'PENDING')

                    //define buildConfig
                    def bcFrontend = openshift.process('-f', 'openshift/curricws-frontend.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")
                    
                    //build from template and tag
                    openshift.apply(bcFrontend).narrow('bc').startBuild('-w').logs('-f')
                   // openshift.tag("${REPO_NAME}-frontend:latest", "${REPO_NAME}-frontend:${JOB_NAME}")

                    //define buildconfig for server
                    //def bcFrontendStatic = openshift.process('-f', 'openshift/curricws-frontend-static.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "NAMESPACE=${TOOLS_PROJECT}")

                    //build from template and tag
                    //openshift.apply(bcFrontendStatic).narrow('bc').startBuild('-w').logs('-f')
                    //openshift.tag("${REPO_NAME}-frontend-static:latest", "${REPO_NAME}-frontend-static:${JOB_NAME}")

                    //notifyStageStatus("Frontend", "SUCCESS")
                }
                catch(e){
                    echo "Frontend build failed"
                    //notifyStageStatus('Frontend', 'FAILURE')
                    throw e
                    
                }
}
            }
          }
        }
      }
    }
    stage('Test') {
      steps {
        echo 'Testing'
      }
    }
  }
}